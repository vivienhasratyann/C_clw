[1mdiff --git a/15.10.24/Ex1 b/15.10.24/Ex1[m
[1mnew file mode 100755[m
[1mindex 0000000..47750f1[m
Binary files /dev/null and b/15.10.24/Ex1 differ
[1mdiff --git a/15.10.24/Ex2 b/15.10.24/Ex2[m
[1mnew file mode 100755[m
[1mindex 0000000..4471c38[m
Binary files /dev/null and b/15.10.24/Ex2 differ
[1mdiff --git a/15.10.24/Exercise1.c b/15.10.24/Exercise1.c[m
[1mnew file mode 100644[m
[1mindex 0000000..1e6d0dd[m
[1m--- /dev/null[m
[1m+++ b/15.10.24/Exercise1.c[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m#include <stdio.h>[m
[32m+[m
[32m+[m[32mvoid doubleValue(int *num) {[m
[32m+[m[32m    *num = *num * 2;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint main() {[m
[32m+[m[32m    int n;[m
[32m+[m[32m    printf("Please provide integer value: ");[m
[32m+[m[32m    scanf("%d", &n);[m
[32m+[m
[32m+[m[32m    doubleValue(&n);[m
[32m+[m
[32m+[m[32m    printf("Doubled value: %d\n", n);[m
[32m+[m
[32m+[m[32m    return 0;[m
[32m+[m[32m}[m
[1mdiff --git a/15.10.24/Exercise2.c b/15.10.24/Exercise2.c[m
[1mnew file mode 100644[m
[1mindex 0000000..53c493d[m
[1m--- /dev/null[m
[1m+++ b/15.10.24/Exercise2.c[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32m#include <stdio.h>[m
[32m+[m
[32m+[m[32m#define SIZE 50[m
[32m+[m
[32m+[m[32mdouble average(int *arr, int size){[m
[32m+[m[32m    double av;[m
[32m+[m[32m    av = (double)sum(arr, size) / size;[m[41m  [m
[32m+[m[32m    return av;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint sum(int *arr, int size){[m
[32m+[m[32m    int s = 0;[m
[32m+[m[32m    for (int i = 0; i < size; i++){[m
[32m+[m[32m        s += *(arr + i);[m
[32m+[m[32m    }[m
[32m+[m[32m    return s;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint main(){[m
[32m+[m[32m    int arr[SIZE];[m
[32m+[m[32m    int size;[m
[32m+[m
[32m+[m[32m    printf("Specify array size (<= 50):");[m
[32m+[m[32m    scanf("%d", &size);[m
[32m+[m
[32m+[m[32m    printf("Specify array elements\n");[m
[32m+[m[32m    for (int i = 0; i < size; i++)[m
[32m+[m[32m        scanf("%d", arr + i);[m
[32m+[m
[32m+[m[32m    printf("The average of the array elements is: %f\n", average(arr, size));[m
[32m+[m[32m    printf("The sum of the array elememts is: %d\n", sum(arr, size));[m
[32m+[m
[32m+[m[32m    return 0;[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/15.10.24/Exercise3.c b/15.10.24/Exercise3.c[m
[1mnew file mode 100644[m
[1mindex 0000000..e73bfea[m
[1m--- /dev/null[m
[1m+++ b/15.10.24/Exercise3.c[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32m#include <stdio.h>[m
[32m+[m
[32m+[m[32mvoid copyArray(int *source, int *destination, int size) {[m
[32m+[m[32m    for (int i = 0; i < size; i++) {[m
[32m+[m[32m        *(destination + i) = *(source + i);[m[41m  [m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint main() {[m
[32m+[m[32m    int sourceArray[] = {1, 2, 3, 4, 5};[m
[32m+[m[32m    int size = sizeof(sourceArray) / sizeof(sourceArray[0]);[m
[32m+[m[32m    int destinationArray[size];[m[41m  [m
[32m+[m[32m    copyArray(sourceArray, destinationArray, size);[m
[32m+[m
[32m+[m[32m    printf("Contents of the destination array:\n");[m
[32m+[m[32m    for (int i = 0; i < size; i++) {[m
[32m+[m[32m        printf("%d ", *(destinationArray + i));[m[41m  [m
[32m+[m[32m    }[m
[32m+[m[32m    printf("\n");[m
[32m+[m
[32m+[m[32m    return 0;[m
[32m+[m[32m}[m
[32m+[m
[1mdiff --git a/myprojects/01.10.2024.c b/myprojects/01.10.2024.c[m
[1mdeleted file mode 100644[m
[1mindex e69de29..0000000[m
[1mdiff --git a/myprojects/fibonacci_number b/myprojects/fibonacci_number[m
[1mnew file mode 100755[m
[1mindex 0000000..737c390[m
Binary files /dev/null and b/myprojects/fibonacci_number differ
[1mdiff --git a/myprojects/fibonacci_number.c b/myprojects/fibonacci_number.c[m
[1mnew file mode 100644[m
[1mindex 0000000..88bd8b2[m
[1m--- /dev/null[m
[1m+++ b/myprojects/fibonacci_number.c[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32m#include <stdio.h>[m
[32m+[m
[32m+[m[32mint fib_num(int n){[m
[32m+[m[32m    if (n <= 1)[m
[32m+[m[32m        return n;[m
[32m+[m[32m    else[m
[32m+[m[32m        return fib_num(n-2) + fib_num(n-1);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint main(){[m
[32m+[m[32m    int n;[m
[32m+[m
[32m+[m[32m    // Ask the user to input the value of n[m
[32m+[m[32m    printf("Enter the number of Fibonacci numbers to generate: ");[m
[32m+[m[32m    scanf("%d", &n);[m
[32m+[m
[32m+[m[32m    // Declare an array to store the Fibonacci numbers[m
[32m+[m[32m    int arr[n];[m
[32m+[m
[32m+[m[32m    // Generate the Fibonacci sequence and store it in the array[m
[32m+[m[32m    for (int i = 0; i < n; i++) {[m
[32m+[m[32m        arr[i] = fib_num(i);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Print the Fibonacci sequence[m
[32m+[m[32m    printf("Fibonacci sequence: ");[m
[32m+[m[32m    for (int i = 0; i < n; i++) {[m
[32m+[m[32m        printf("%d ", arr[i]);[m
[32m+[m[32m    }[m
[32m+[m[32m    printf("\n");[m
[32m+[m
[32m+[m[32m    return 0;[m
[32m+[m[32m}[m
[1mdiff --git a/myprojects/palindrome b/myprojects/palindrome[m
[1mnew file mode 100755[m
[1mindex 0000000..c520d82[m
Binary files /dev/null and b/myprojects/palindrome differ
[1mdiff --git a/myprojects/palindrome_checker.c b/myprojects/palindrome_checker.c[m
[1mnew file mode 100644[m
[1mindex 0000000..c0628d6[m
[1m--- /dev/null[m
[1m+++ b/myprojects/palindrome_checker.c[m
[36m@@ -0,0 +1,147 @@[m
[32m+[m[32m// CHATGPT-I GRACY[m
[32m+[m
[32m+[m[32m// #include <stdio.h>[m
[32m+[m[32m// #include <ctype.h>[m
[32m+[m[32m// #include <string.h>[m
[32m+[m
[32m+[m[32m// // Function to remove spaces from the string[m
[32m+[m[32m// void remove_spaces(char *str) {[m
[32m+[m[32m//     int i = 0, j = 0;[m
[32m+[m[32m//     while (str[i] != '\0') {[m
[32m+[m[32m//         if (str[i] != ' ') {[m
[32m+[m[32m//             str[j++] = str[i];[m
[32m+[m[32m//         }[m
[32m+[m[32m//         i++;[m
[32m+[m[32m//     }[m
[32m+[m[32m//     str[j] = '\0';[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// // Function to remove punctuation from the string[m
[32m+[m[32m// void remove_punctuation(char *str) {[m
[32m+[m[32m//     int i = 0, j = 0;[m
[32m+[m[32m//     while (str[i] != '\0') {[m
[32m+[m[32m//         if (isalnum(str[i])) { // Only keep alphanumeric characters[m
[32m+[m[32m//             str[j++] = str[i];[m
[32m+[m[32m//         }[m
[32m+[m[32m//         i++;[m
[32m+[m[32m//     }[m
[32m+[m[32m//     str[j] = '\0';[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// // Function to convert all characters to lowercase[m
[32m+[m[32m// void make_lowercase(char *str) {[m
[32m+[m[32m//     for (int i = 0; str[i] != '\0'; i++) {[m
[32m+[m[32m//         str[i] = tolower(str[i]);[m
[32m+[m[32m//     }[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// // Function to check if the string is a palindrome[m
[32m+[m[32m// int is_palindrome(const char *str) {[m
[32m+[m[32m//     int left = 0;[m
[32m+[m[32m//     int right = strlen(str) - 1;[m
[32m+[m
[32m+[m[32m//     while (left < right) {[m
[32m+[m[32m//         if (str[left] != str[right]) {[m
[32m+[m[32m//             return 0; // Not a palindrome[m
[32m+[m[32m//         }[m
[32m+[m[32m//         left++;[m
[32m+[m[32m//         right--;[m
[32m+[m[32m//     }[m
[32m+[m[32m//     return 1; // Palindrome[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// int main() {[m
[32m+[m[32m//     char s[1000];[m
[32m+[m
[32m+[m[32m//     // Step 1: Read string input from user[m
[32m+[m[32m//     printf("Enter a string: ");[m
[32m+[m[32m//     fgets(s, sizeof(s), stdin);[m
[32m+[m
[32m+[m[32m//     // Remove the newline character if present[m
[32m+[m[32m//     s[strcspn(s, "\n")] = 0;[m
[32m+[m
[32m+[m[32m//     // Step 2: Remove spaces[m
[32m+[m[32m//     remove_spaces(s);[m
[32m+[m
[32m+[m[32m//     // Step 3: Remove punctuation[m
[32m+[m[32m//     remove_punctuation(s);[m
[32m+[m
[32m+[m[32m//     // Step 4: Convert to lowercase[m
[32m+[m[32m//     make_lowercase(s);[m
[32m+[m
[32m+[m[32m//     // Step 5: Check if the string is a palindrome[m
[32m+[m[32m//     if (is_palindrome(s)) {[m
[32m+[m[32m//         printf("The string is a palindrome.\n");[m
[32m+[m[32m//     } else {[m
[32m+[m[32m//         printf("The string is not a palindrome.\n");[m
[32m+[m[32m//     }[m
[32m+[m
[32m+[m[32m//     return 0;[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m// MER SHEDEVRODASATUYI GRACY[m
[32m+[m
[32m+[m[32m// #include <stdio.h>[m
[32m+[m[32m// #include <stdlib.h>[m
[32m+[m
[32m+[m
[32m+[m[32m// int main(){[m
[32m+[m[32m//     int MAX_CHARACTERS = 1000;[m
[32m+[m[32m//     char *s = malloc(sizeof(char) * MAX_CHARACTERS);[m
[32m+[m[32m//     if (!s)[m
[32m+[m[32m//     {[m
[32m+[m[32m//         printf("error: failed to allocate memoory.");[m
[32m+[m[32m//         return 1;[m
[32m+[m[32m//     }[m
[32m+[m
[32m+[m[32m//     getline(&s, &MAX_CHARACTERS, stdin);[m
[32m+[m
[32m+[m[32m//     // normalize_string(s);[m
[32m+[m[32m//     if (is_palindrome(s))[m
[32m+[m[32m//         printf("The provided string is palindrome\n");[m
[32m+[m[32m//     else[m
[32m+[m[32m//         printf("The provided string is not palindrome\n");[m
[32m+[m[32m//     return 0;[m
[32m+[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// void normalize_string(char *str) {[m
[32m+[m[32m//     unsigned size = strlen(str);[m
[32m+[m[32m//     char *str_start = str;[m
[32m+[m[32m//     char *s = malloc(sizeof(char) * size);[m
[32m+[m[32m//     if (!s){[m
[32m+[m[32m//         printf("error: failed to allocate memory.");[m
[32m+[m[32m//         return 1;[m
[32m+[m[32m//     }[m
[32m+[m[32m//     char *s_start = s;[m
[32m+[m[32m//     while (*str) {[m
[32m+[m[32m//         if (!(*str == ' ' || *str == '\t' || *str == ',' || *str == '.' || *str == '\n')){[m
[32m+[m[32m//             if (*str >= 'A' && *str <= 'Z') {[m
[32m+[m[32m//                 *(s++) = *str - 'A' - 'a';[m
[32m+[m[32m//             } else {[m
[32m+[m[32m//                 *(s++) = *(str);[m
[32m+[m[32m//             }[m
[32m+[m[32m//         }[m
[32m+[m[32m//         ++str;[m
[32m+[m[32m//     }[m
[32m+[m
[32m+[m[32m//     while (*s_start)[m
[32m+[m[32m//         *(str_start ++) = *(s_start);[m
[32m+[m[32m//     free(s);[m
[32m+[m[32m// }[m
[32m+[m[32m// int is_palindrome(char *str){[m
[32m+[m[32m//     char *str_start = str;[m
[32m+[m[32m//     char *str_end = str +strlen(str) - 1;[m
[32m+[m[32m//     while (str_start < str_end){[m
[32m+[m[32m//         if (*(str_start++) != *(str_end--)) {[m
[32m+[m[32m//             return 0;[m
[32m+[m[32m//         }[m
[32m+[m[32m//     }[m
[32m+[m[32m//     return 1;[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m
[32m+[m[32m// MI XOSQOV ESI CHI ASHXATUM[m
\ No newline at end of file[m
